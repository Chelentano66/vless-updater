import base64
import requests
import yaml
from urllib.parse import urlparse, parse_qs, unquote

SUBSCRIPTION_URL = "https://xeovo.com/proxy/pw/MGEpOQtBnz1iN6SPxCCSUOoUCefQx8Ao/plain/config/"
TEMPLATE_PATH = "scripts/template.yaml"
OUTPUT_PATH = "output/vless.yaml"

def parse_vless_link(link):
    # –ü—Ä–∏–º–µ—Ä vless://uuid@host:port/path?query#name
    # –ü–∞—Ä—Å–∏–º –≤—Ä—É—á–Ω—É—é
    # –£–±–µ—Ä—ë–º –ø—Ä–µ—Ñ–∏–∫—Å
    link = link[len("vless://"):]
    
    # –†–∞–∑–æ–±—å—ë–º –Ω–∞ –æ—Å–Ω–æ–≤–Ω—É—é —á–∞—Å—Ç—å –∏ #name
    if "#" in link:
        main_part, name = link.split("#", 1)
        name = unquote(name)
    else:
        main_part = link
        name = ""
    
    # –†–∞–∑–¥–µ–ª–∏–º –Ω–∞ userinfo –∏ query
    if "?" in main_part:
        userinfo_hostport, query_str = main_part.split("?", 1)
        query = parse_qs(query_str)
    else:
        userinfo_hostport = main_part
        query = {}
    
    # userinfo_hostport: uuid@host:port/path
    # –†–∞–∑–æ–±—å—ë–º –Ω–∞ uuid –∏ host:port/path
    if "@" in userinfo_hostport:
        uuid, host_port_path = userinfo_hostport.split("@", 1)
    else:
        raise ValueError("No UUID found in link")
    
    # –¢–µ–ø–µ—Ä—å host_port_path: host:port/path
    # –ù–∞–º –Ω—É–∂–Ω–æ –æ—Ç–¥–µ–ª–∏—Ç—å host, port –∏ path
    # –†–∞–∑–æ–±—å—ë–º —Å–Ω–∞—á–∞–ª–∞ –ø–æ "/"
    if "/" in host_port_path:
        host_port, path = host_port_path.split("/", 1)
        path = "/" + path
    else:
        host_port = host_port_path
        path = ""
    
    # –†–∞–∑–¥–µ–ª–∏–º host –∏ port
    if ":" in host_port:
        host, port_str = host_port.split(":", 1)
        # –∏–Ω–æ–≥–¥–∞ —Ç—É—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ—Ä—Ç —Å –ª–∏—à–Ω–∏–º "/path" - –ª—É—á—à–µ —Å—Ä–∞–∑—É int, –µ—Å–ª–∏ –æ—à–∏–±–∫–∞ - –∫–∏–¥–∞–µ–º
        try:
            port = int(port_str)
        except ValueError:
            # –ï—Å–ª–∏ –ø–æ—Ä—Ç –Ω–µ —á–∏—Å–ª–æ - –æ—à–∏–±–∫–∞
            raise ValueError(f"Invalid port: {port_str}")
    else:
        host = host_port
        port = 443  # –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –ø–æ—Ä—Ç
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ query
    # –ü—Ä–∏–º–µ—Ä: type=ws, encryption=none, security=tls, sni=host, host=host, path=/potosi
    type_ = query.get("type", [""])[0]
    encryption = query.get("encryption", [""])[0]
    security = query.get("security", [""])[0]
    sni = query.get("sni", [""])[0]
    host_header = query.get("host", [""])[0]
    path_query = query.get("path", [""])[0]
    
    return {
        "name": name or f"{host}:{port}",
        "type": "vless",
        "server": host,
        "port": port,
        "uuid": uuid,
        "encryption": encryption,
        "security": security,
        "network": type_,
        "sni": sni,
        "host": host_header,
        "path": path_query,
    }

def main():
    print("üîÑ –°–∫–∞—á–∏–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É...")
    response = requests.get(SUBSCRIPTION_URL)
    response.raise_for_status()

    # –ü–æ–¥–ø–∏—Å–∫–∞ –≤ base64, –¥–µ–∫–æ–¥–∏—Ä—É–µ–º
    decoded = base64.b64decode(response.text).decode("utf-8")

    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å—Ç—Ä–æ–∫–∏ (—Å—Å—ã–ª–∫–∏)
    links = decoded.strip().splitlines()

    print("üîç –§–∏–ª—å—Ç—Ä—É–µ–º VLESS —Å—Å—ã–ª–∫–∏...")
    vless_links = [l for l in links if l.startswith("vless://")]

    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ VLESS –ø—Ä–æ–∫—Å–∏: {len(vless_links)}")

    proxies = []
    for link in vless_links:
        try:
            proxy = parse_vless_link(link)
            proxies.append(proxy)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ: {link} -> {e}")

    print("üìÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —à–∞–±–ª–æ–Ω...")
    with open(TEMPLATE_PATH, "r", encoding="utf-8") as f:
        template = yaml.safe_load(f)

    # –í—Å—Ç–∞–≤–ª—è–µ–º proxies –≤ –∫–æ–Ω—Ñ–∏–≥
    template["proxies"] = proxies

    # –í proxy-groups –∏—â–µ–º –≥—Ä—É–ø–ø—É MAIN –∏ –≤—Å—Ç–∞–≤–ª—è–µ–º —Ç—É–¥–∞ –∏–º–µ–Ω–∞ –ø—Ä–æ–∫—Å–∏
    proxy_names = [p["name"] for p in proxies]

    if "proxy-groups" in template:
        for group in template["proxy-groups"]:
            if group.get("name") == "MAIN":
                group["proxies"] = proxy_names

    print(f"üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ {OUTPUT_PATH}...")
    with open(OUTPUT_PATH, "w", encoding="utf-8") as f:
        yaml.dump(template, f, allow_unicode=True)

    print("‚úÖ –ì–æ—Ç–æ–≤–æ!")

if __name__ == "__main__":
    main()
