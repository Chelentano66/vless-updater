import requests
import yaml
from urllib.parse import urlparse, parse_qs, unquote

# –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
SUBSCRIPTION_URL = "https://xeovo.com/proxy/pw/MGEpOQtBnz1iN6SPxCCSUOoUCefQx8Ao/plain/config/"
TEMPLATE_PATH = "scripts/template.yaml"
OUTPUT_PATH = "config.yaml"

def parse_vless(url):
    # –ü—Ä–∏–º–µ—Ä vless —Å—Å—ã–ª–∫–∏:
    # vless://UUID@host:port/path?query#remark
    # –ü—Ä–∏–º–µ—Ä: vless://913d91d6-245e-44c1-bd10-fe378302eefc@uk-global2.xeovo.net:443/potosi?type=ws&encryption=none&security=tls&sni=uk-global2.xeovo.net&host=uk-global2.xeovo.net&path=%2Fpotosi#UK / VLESS (WS+TLS, for Xray)

    if not url.startswith("vless://"):
        return None

    # –£–±–µ—Ä—ë–º –ø—Ä–µ—Ñ–∏–∫—Å –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
    url_ = url[len("vless://"):]

    # –†–∞–∑–æ–±—å—ë–º –Ω–∞ UUID –∏ –æ—Å—Ç–∞–ª—å–Ω–æ–µ –ø–æ "@"
    try:
        user_uuid, rest = url_.split("@", 1)
    except ValueError:
        return None

    # –¢–µ–ø–µ—Ä—å –Ω–∞–¥–æ –∞–∫–∫—É—Ä–∞—Ç–Ω–æ —Ä–∞–∑–æ–±—Ä–∞—Ç—å host:port/path?query#fragment
    # –£ urlparse –ø–æ—Ä—Ç –∏ path –∏–¥—É—Ç –≤–º–µ—Å—Ç–µ, –Ω–æ –≤ –Ω–∞—à–µ–º —Å–ª—É—á–∞–µ –ø–æ—Ä—Ç –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å "/path" —Å—Ä–∞–∑—É,
    # –ø–æ—ç—Ç–æ–º—É –ø–∞—Ä—Å–∏–º –≤—Ä—É—á–Ω—É—é:
    # –†–∞–∑–æ–±—å—ë–º rest –Ω–∞ hostport –∏ query+fragment
    # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–¥–µ–ª–∏–º #remark
    if "#" in rest:
        rest, remark = rest.split("#", 1)
    else:
        remark = ""

    # –û—Ç–¥–µ–ª–∏–º query
    if "?" in rest:
        hostport_path, query_string = rest.split("?", 1)
    else:
        hostport_path = rest
        query_string = ""

    # –¢–µ–ø–µ—Ä—å –∏–∑ hostport_path –≤—ã–¥–µ–ª–∏–º host, port, path
    # hostport_path = "uk-global2.xeovo.net:443/potosi"
    # —Ä–∞–∑–¥–µ–ª–∏–º –ø–æ ":" (–ø–µ—Ä–≤–æ–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ)
    if ":" not in hostport_path:
        return None
    host, port_path = hostport_path.split(":", 1)

    # port_path = "443/potosi"
    # –æ—Ç–¥–µ–ª–∏–º –ø–æ—Ä—Ç (—á–∏—Å–ª–∞) –æ—Ç –ø—É—Ç–∏
    port = ""
    path = "/"
    for i, ch in enumerate(port_path):
        if ch.isdigit():
            port += ch
        else:
            path = port_path[i:]
            break
    else:
        # –≤–µ—Å—å port_path ‚Äî –ø–æ—Ä—Ç
        path = "/"

    if port == "":
        return None
    port = int(port)

    # –†–∞—Å–ø–∞—Ä—Å–∏–º query –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    query = parse_qs(query_string)

    # –í—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º –Ω—É–∂–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, type, encryption, security –∏ –¥—Ä.)
    # –ü—Ä–∏–º–µ—Ä –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Å–ª–æ–≤–∞—Ä—è:
    proxy = {
        "name": remark or f"{host}:{port}",
        "type": "vless",
        "server": host,
        "port": port,
        "uuid": user_uuid,
        "alterId": 0,
        "encryption": query.get("encryption", ["none"])[0],
        "network": query.get("type", ["tcp"])[0],
        "security": query.get("security", ["none"])[0],
    }

    # –ï—Å–ª–∏ network == ws, –¥–æ–±–∞–≤–ª—è–µ–º wsSettings
    if proxy["network"] == "ws":
        ws_path = query.get("path", [path])[0]
        # unquote –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
        ws_path = unquote(ws_path)
        ws_host = query.get("host", [""])[0]
        proxy["ws-opts"] = {
            "path": ws_path,
        }
        if ws_host:
            proxy["ws-opts"]["headers"] = {"Host": ws_host}

    return proxy


def main():
    print("üîÑ –°–∫–∞—á–∏–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É...")
    response = requests.get(SUBSCRIPTION_URL)
    response.raise_for_status()
    decoded = response.text  # plain —Ç–µ–∫—Å—Ç

    print("üîç –§–∏–ª—å—Ç—Ä—É–µ–º VLESS —Å—Å—ã–ª–∫–∏...")
    lines = decoded.splitlines()
    proxies = []
    for line in lines:
        line = line.strip()
        if line.startswith("vless://"):
            proxy = parse_vless(line)
            if proxy:
                proxies.append(proxy)

    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ VLESS –ø—Ä–æ–∫—Å–∏: {len(proxies)}")

    print("üìÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —à–∞–±–ª–æ–Ω...")
    with open(TEMPLATE_PATH, "r", encoding="utf-8") as f:
        template = yaml.safe_load(f)

    # –í—Å—Ç–∞–≤–ª—è–µ–º proxies –≤ —à–∞–±–ª–æ–Ω
    template["proxies"] = proxies

    # –í—Å—Ç–∞–≤–ª—è–µ–º –∏–º–µ–Ω–∞ –ø—Ä–æ–∫—Å–∏ –≤ proxy-groups -> MAIN -> proxies
    proxy_names = [p["name"] for p in proxies]
    for group in template.get("proxy-groups", []):
        if group.get("name") == "MAIN":
            group["proxies"] = proxy_names

    print("üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥ –≤", OUTPUT_PATH)
    with open(OUTPUT_PATH, "w", encoding="utf-8") as f:
        yaml.dump(template, f, allow_unicode=True, sort_keys=False)

    print("‚úÖ –ì–æ—Ç–æ–≤–æ!")

if __name__ == "__main__":
    main()
